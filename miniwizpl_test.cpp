#include "emp-zk/emp-zk.h"
#include "emp-zk/extensions/ram-zk/zk-mem.h"
#include <iostream>
#include "emp-tool/emp-tool.h"
#include "matrix.h"
using namespace emp;
using namespace std;

int port, party;
const int threads = 1;
const int index_sz = 20, step_sz = 25, val_sz = 32;

QSMatrix<Float> relu(const QSMatrix<Float>& mat) {
  unsigned rows = mat.get_rows();
  unsigned cols = mat.get_cols();

  QSMatrix<Float> result(rows, cols, 0.0);
  Float zero = Float(0.0, PUBLIC);

  for (unsigned i=0; i<rows; i++) {
    for (unsigned j=0; j<cols; j++) {
      Float val = mat(i, j);
      Bit t = val.less_equal(zero);
      result(i,j) = val.If(t, zero);
    }
  }

  return result;
}

QSMatrix<Float> log_softmax(const QSMatrix<Float>& mat) {
  unsigned rows = mat.get_rows();
  unsigned cols = mat.get_cols();

  QSMatrix<Float> result(rows, cols, 0.0);

  Float sum = Float(0.0, PUBLIC);
  for (unsigned i=0; i<rows; i++) {
    for (unsigned j=0; j<cols; j++) {
      sum = sum + mat(i, j).exp();
    }
  }

  for (unsigned i=0; i<rows; i++) {
    for (unsigned j=0; j<cols; j++) {
      result(i, j) = (mat(i, j).exp() / sum).ln();
    }
  }

  return result;
}

bool compare_qs_matrices(const QSMatrix<Float>& a, const QSMatrix<Float>& b) {
  if (a.get_rows() != b.get_rows()) return false;
  if (a.get_cols() != b.get_cols()) return false;

  for (unsigned i = 0; i < a.get_rows(); i++) {
    for (unsigned j = 0; j < a.get_cols(); j++) {
      if (a(i, j).reveal<double>(PUBLIC) - b(i, j).reveal<double>(PUBLIC) > .001) return false;
    }
  }
  return true;
}

bool compare_qs_matrices(const QSMatrix<float>& a, const QSMatrix<Float>& b) {
  if (a.get_rows() != b.get_rows()) return false;
  if (a.get_cols() != b.get_cols()) return false;

  for (unsigned i = 0; i < a.get_rows(); i++) {
    for (unsigned j = 0; j < a.get_cols(); j++) {
      if (a(i, j) - b(i, j).reveal<double>(PUBLIC) > .001) return false;
    }
  }
  return true;
}

bool compare_qs_matrices(const QSMatrix<Float>& a, const QSMatrix<float>& b) {
  if (a.get_rows() != b.get_rows()) return false;
  if (a.get_cols() != b.get_cols()) return false;

  for (unsigned i = 0; i < a.get_rows(); i++) {
    for (unsigned j = 0; j < a.get_cols(); j++) {
      if (a(i, j).reveal<double>(PUBLIC) - b(i, j) > .001) return false;
    }
  }
  return true;
}

bool compare_qs_matrices(const QSMatrix<float>& a, const QSMatrix<float>& b) {
  if (a.get_rows() != b.get_rows()) return false;
  if (a.get_cols() != b.get_cols()) return false;

  for (unsigned i = 0; i < a.get_rows(); i++) {
    for (unsigned j = 0; j < a.get_cols(); j++) {
      if (a(i, j) - b(i, j) > .001) return false;
    }
  }
  return true;
}

Integer mux(Bit s, Integer a, Integer b) {
  return b.select(s, a);
}

// *************************************************************************

void test(BoolIO<NetIO> *ios[threads], int party) {
  setup_zk_bool<BoolIO<NetIO>>(ios, threads, party);

  cout << "!!\n";

  Float pub_zero = Float(0.0, PUBLIC);

  std::ifstream is("miniwizpl_test.cpp.emp_wit");
  if (! is.good()) {
    cout << "Error reading the memory dump file\n";
    exit(1);
  }
  int tmp;


  cout << "starting defs\n";
  Integer intval_1 = Integer(32, 5, ALICE);


  cout << "defs complete\n";

  bool public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345_init[] = {1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,1,0,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,1,1,0,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,1,0,0,0,1};
  vector<Bit> public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345_vec;
  for (int i = 0; i < 2042; ++i)
    public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345_vec.push_back(Bit(public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345_init[i], PUBLIC));
  Integer public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345 = Integer(public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345_vec);
  public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345.resize(32);

  bool public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659_init[] = {1,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,1};
  vector<Bit> public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659_vec;
  for (int i = 0; i < 254; ++i)
    public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659_vec.push_back(Bit(public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659_init[i], PUBLIC));
  Integer public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659 = Integer(public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659_vec);
  public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659.resize(32);

  Integer result_2 = intval_1 * public_int_25710352189864731009703237372676322068675110861630427646026530491104459008659;
  bool public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509_init[] = {1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,1};
  vector<Bit> public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509_vec;
  for (int i = 0; i < 256; ++i)
    public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509_vec.push_back(Bit(public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509_init[i], PUBLIC));
  Integer public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509 = Integer(public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509_vec);
  public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509.resize(32);

  Integer result_3 = result_2 % public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509;
  bool public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703_init[] = {1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,1,1,1};
  vector<Bit> public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703_vec;
  for (int i = 0; i < 2048; ++i)
    public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703_vec.push_back(Bit(public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703_init[i], PUBLIC));
  Integer public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703 = Integer(public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703_vec);
  public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703.resize(32);

  Integer result_intval_4 = public_int_271450346267839589663277912554924355461149414907740510764893698780266949003457263892902821893044455638524513153812537373318985302522919868423898016393816208912008810030580599500220272787747658021751558549547561455962006314196503788734573174864550529801773792209319941435969131568002743706209020214208053180062349809094561756300266813637485311193397637473061101596549358377690598419154537129967117061731389146685523600458739186526220410744611511057014196730642344077404554200454755215033198557342825197574017367602792037276507199629698089069796856339473263980334065006128895825867754110811918188858164233572452171345.modExp(result_3, public_int_27626776538305594009809861191856575105281001789574618354525205452786334770038929521663153410712887349782339562499582292147819938983753732669236781944525866890358200985826394953241007228693222390380105278164278731122597861695820999612206271474033959084710637511735598205612906672772427599949372768538385487055105162688216315328000610008870580477596531092270614521999228297499511519195956723037433394514990211380776133854900072102262117267155611758101111222888384385537042272343075370049856492005351013749002964731176962965815750597476155288543186355957844003059697039813420515612895692235065642398134602123329992671703);

  bool public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003_init[] = {1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0,1,1};
  vector<Bit> public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003_vec;
  for (int i = 0; i < 2046; ++i)
    public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003_vec.push_back(Bit(public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003_init[i], PUBLIC));
  Integer public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003 = Integer(public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003_vec);
  public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003.resize(32);

  Integer result_5 = result_intval_4 * public_int_6774671087423833458794150063076987035295760122949084775027099152828976948463097455529554982757551695251060808253228958589144552131357980523515314972497446479841520656093528216582809895983002539974896556642634102689268079593605684016292431256821126176722748309135763874053459210363440846197949674850908174790798120257259690603629444642088962848695595907533195567327708048002075994135520966201719403944089876833191726882002176597330696874723311879831599038859620831099742258929319144728167433546374836341279777125302130551817813973476512266620527753700684763884668496050825775740053701149258725763720555058292646221003;
  Integer result_6 = result_5 % public_int_101605500675552000707777361188070198923001395405158960705476217806641701119509;
  bool public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154_init[] = {1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0};
  vector<Bit> public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154_vec;
  for (int i = 0; i < 256; ++i)
    public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154_vec.push_back(Bit(public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154_init[i], PUBLIC));
  Integer public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154 = Integer(public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154_vec);
  public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154.resize(32);

  Bit result_7 = result_6 == public_int_60766705565044830796585542350600076226071275438873082492479267049982890701154;
  bool final_result = result_7.reveal<bool>(PUBLIC);
  cout << "final result:" << final_result << "\n";

  int num_and_gates = CircuitExecution::circ_exec->num_and();
  cout << "Number of and gates executed: " << num_and_gates << "\n";
  finalize_zk_bool<BoolIO<NetIO>>();
  cout <<"done\n";
}



int main(int argc, char** argv) {
  parse_party_and_port(argv, &party, &port);
  BoolIO<NetIO>* ios[threads];
  for(int i = 0; i < threads; ++i)
    ios[i] = new BoolIO<NetIO>(new NetIO(party == ALICE?nullptr:"127.0.0.1",port), party==ALICE);

  test(ios, party);

  for(int i = 0; i < threads; ++i) {
    delete ios[i]->io;
    delete ios[i];
  }
  return 0;
}

