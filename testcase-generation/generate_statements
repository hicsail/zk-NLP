#!/usr/bin/env python3
# Run a set of tests, based on the config.json file

import sys
from pathlib import Path
import json
import subprocess 

# Map descriptors to files
# desc_to_script = {}
# desc_to_script['list_sum'] = 'list_sum.py'


prime_names = {}
prime_names['p0'] = 2
prime_names['p1'] = 2305843009213693951
prime_names['p2'] = 21888242871839275222246405745257275088548364400416034343698204186575808495617
prime_names['p3'] = 1073479681
prime_names['p4'] = 57896044618658097711785492504343953926634992332820282019728792003956564819949

if __name__ == "__main__":

    if len(sys.argv) > 2:
        print("Expecting generate_statements <config file>")
        print("  <config file> default is config.json")
        exit(1)

    if len(sys.argv) > 1:
        config_file = sys.argv[1]
    else:
        config_file = "config.json"
        
    with open(config_file, 'r') as f:
        cf = json.load(f)
      
    # Extract metadata
    target = cf['target']
    Path(target).mkdir(parents=True, exist_ok=True)
    for name, family in cf['test-families'].items():
        #script = desc_to_script[name]
        script = f'{name}.py'

        sizes = " ".join((str(x) for x in family['sizes']))
        for prime in family['primes']:
            for size in family['sizes']:
                this_ex = f'python3 {script} {target} {prime_names[prime]} {prime} {size}'
                print('* Generating:', this_ex)

                try:
                    retcode = subprocess.call(this_ex, shell=True)
                    fname = f'{target}/{name}_{prime}_{size}'
                    test_ex = f'wtk-firealarm {fname}.rel {fname}.ins {fname}.wit'

                    print('* Testing:', test_ex)
                    retcode = subprocess.call(test_ex, shell=True)
                    
                    if retcode != 0:
                        print(script + " returned nonzero:", retcode, file=sys.stderr)
                        sys.exit(retcode)
                except OSError as e:
                    print("Error:", e, file=sys.stderr)
